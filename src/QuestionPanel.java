/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author Sam Zhang, Zihan Chen
 * @version 1.0
 * @since 05-13-2025
 */

// Import libraries
import java.awt.event.WindowEvent;
import java.awt.event.WindowAdapter;

public class QuestionPanel extends javax.swing.JFrame {
    // This is the number of questions, set to the number of questions
    public final static int NUMQUESTIONS = 4;
    //This is the array to store all the questions
    private Question[] questions = new Question[NUMQUESTIONS];
    private int currentQIndex = 0;
    private boolean answerCorrect;
    public static int score;
    /**
     * Creates new form Question
     */
    public QuestionPanel() {
        initComponents();
        addWindowListener(new WindowAdapter() {
            @Override
            public void windowActivated(WindowEvent e) {
                /**
                 * To make a multiple choice question:
                 * 1. make an array of type String and put all of your options into there
                 * 2. initialize a Multiple_Choice object at the index of the question your making
                 * 3. enter your data ; for order, look at the constructor class in Multiple_Choice.java
                 * 
                 * To make a true or false question:
                 * 1. initialize a Multiple_Choice object at the index of the question your making
                 * 2. enter your data ; for order, look at the constructor class in True_False.java
                 * 
                 * I'd recommend storing all the success and fail messages into two arrays
                 */
                String[] testMC = {"It cites multiple reputable scientific journals", 
                    "It uses vague language like \"scientists say\" without naming them", 
                    "It was published on a well-known medical journal's website", 
                    "It includes interviews with licensed oncologists"};
                questions[0] = new Multiple_Choice("\"Scientists discover that drinking 10 cups of coffee a day cures cancer\"", 1, "headline", false, testMC, 2, "correct", "false");
                questions[1] = new True_False("\"NASA Confirms Earth Will Go Dark for 6 Days in November Due to Solar Storm\"", 2, "headline", true, true, "correct", "false");
                questions[2] = new Multiple_Choice("\"Local Man Wins Lottery Twice in One Week Using the Same Numbers\"", 3, "headline", false, testMC, 2, "correct", "false");
                questions[3] = new True_False("\"Doctors Say Eating Ice Cream for Breakfast Improves Mental Performance\"", 4, "headline", true, true, "correct", "false");
                question.setText(questions[0].getQ());
                if (questions[0] instanceof Multiple_Choice){
                    option1.setText(((Multiple_Choice) questions[0]).getChoices()[0]);
                    option2.setText(((Multiple_Choice) questions[0]).getChoices()[1]);
                    option3.setText(((Multiple_Choice) questions[0]).getChoices()[2]);
                    option4.setText(((Multiple_Choice) questions[0]).getChoices()[3]);
                } else if (questions[0] instanceof True_False){
                    option1.setVisible(false);
                    option2.setText("True");
                    option3.setText("False");
                    option4.setVisible(false);
                }
                next.setVisible(false);
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        question = new javax.swing.JLabel();
        back = new javax.swing.JButton();
        option2 = new javax.swing.JButton();
        option3 = new javax.swing.JButton();
        message = new javax.swing.JLabel();
        option1 = new javax.swing.JButton();
        option4 = new javax.swing.JButton();
        next = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        question.setText("\"Scientists discover that drinking 10 cups of coffee a day cures cancer.\" ");

        back.setText("Back to Title");
        back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backActionPerformed(evt);
            }
        });

        option2.setText("Choice 2");
        option2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                option2ActionPerformed(evt);
            }
        });

        option3.setText("Choice 3");
        option3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                option3ActionPerformed(evt);
            }
        });

        message.setText("Placeholder reason & sources");

        option1.setText("Choice 1");
        option1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                option1ActionPerformed(evt);
            }
        });

        option4.setText("Choice 4");
        option4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                option4ActionPerformed(evt);
            }
        });

        next.setText("Next Question");
        next.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(question, javax.swing.GroupLayout.DEFAULT_SIZE, 488, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(option2)
                            .addComponent(option1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(back)
                                .addGap(18, 18, 18)
                                .addComponent(next))
                            .addComponent(option3)
                            .addComponent(option4)
                            .addComponent(message, javax.swing.GroupLayout.PREFERRED_SIZE, 370, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(question, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(option1)
                .addGap(7, 7, 7)
                .addComponent(option2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(option3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(option4)
                .addGap(37, 37, 37)
                .addComponent(message, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(back)
                    .addComponent(next))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
  
    private void backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backActionPerformed
        new TitlePanel().setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_backActionPerformed

    private void option1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_option1ActionPerformed
        //If the currect question object is an instance of Multiple_Choice
        if (questions[currentQIndex] instanceof Multiple_Choice current_question){
            //If the answerIndex is 0 (if this option is correct)
            if (current_question.getanswerIndex() == 0){
                //Display success message
                message.setText(current_question.getSuccessMessage());
                answerCorrect = true;
            } else {
                //Display fail message
                message.setText(current_question.getFailMessage());
                answerCorrect = false;
            }
        }
        next.setVisible(true);
    }//GEN-LAST:event_option1ActionPerformed

    private void option2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_option2ActionPerformed
        //If the currect question object is an instance of Multiple_Choice
        if (questions[currentQIndex] instanceof Multiple_Choice current_question){
            //If the answerIndex is 0 (if this option is correct)
            if (current_question.getanswerIndex() == 1){
                //Display success message
                message.setText(current_question.getSuccessMessage());
                answerCorrect = true;
            } else {
                //Display fail message
                message.setText(current_question.getFailMessage());
                answerCorrect = false;
            }
        } 
        //If the currect question object is an instance of True_False
        else if (questions[currentQIndex] instanceof True_False current_question){
            //If the answer is true (if this option is correct)
            if (current_question.getAnswer() == true){
                //Display success message
                message.setText(current_question.getSuccessMessage());
                answerCorrect = true;
            } else {
                //Display fail message
                message.setText(current_question.getFailMessage());
                answerCorrect = false;
            }
        }
        next.setVisible(true);
    }//GEN-LAST:event_option2ActionPerformed

    private void option3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_option3ActionPerformed
        //If the currect question object is an instance of Multiple_Choice
        if (questions[currentQIndex] instanceof Multiple_Choice current_question){
            //If the answerIndex is 0 (if this option is correct)
            if (current_question.getanswerIndex() == 2){
                //Display success message
                message.setText(current_question.getSuccessMessage());
                answerCorrect = true;
            } else {
                //Display fail message
                message.setText(current_question.getFailMessage());
                answerCorrect = false;
            }
        } 
        //If the currect question object is an instance of True_False
        else if (questions[currentQIndex] instanceof True_False current_question){
            //If the answer is false (if this option is correct)
            if (current_question.getAnswer() == false){
                //Display success message
                message.setText(current_question.getSuccessMessage());
                answerCorrect = true;
            } else {
                //Display fail message
                message.setText(current_question.getFailMessage());
                answerCorrect = false;
            }
        }
        next.setVisible(true);
    }//GEN-LAST:event_option3ActionPerformed

    private void option4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_option4ActionPerformed
        //If the currect question object is an instance of Multiple_Choice
        if (questions[currentQIndex] instanceof Multiple_Choice current_question){
            //If the answerIndex is 0 (if this option is correct)
            if (current_question.getanswerIndex() == 3){
                //Display success message
                message.setText(current_question.getSuccessMessage());
                answerCorrect = true;
            } else {
                //Display fail message
                message.setText(current_question.getFailMessage());
                answerCorrect = false;
            }
        }
        next.setVisible(true);
    }//GEN-LAST:event_option4ActionPerformed

    private void nextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextActionPerformed
        if (answerCorrect){
            score++;
        }
        if (currentQIndex + 1 < questions.length){
            currentQIndex++;
            question.setText(questions[currentQIndex].getQ());
            if (questions[currentQIndex] instanceof Multiple_Choice){
                option1.setText(((Multiple_Choice) questions[currentQIndex]).getChoices()[0]);
                option2.setText(((Multiple_Choice) questions[currentQIndex]).getChoices()[1]);
                option3.setText(((Multiple_Choice) questions[currentQIndex]).getChoices()[2]);
                option4.setText(((Multiple_Choice) questions[currentQIndex]).getChoices()[3]);
            } else if (questions[currentQIndex] instanceof True_False){
                option1.setVisible(false);
                option2.setText("True");
                option3.setText("False");
                option4.setVisible(false);
            }
            next.setVisible(false);
        } else {
            new EndPanel().setVisible(true);
            this.setVisible(false);
        }
    }//GEN-LAST:event_nextActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(QuestionPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(QuestionPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(QuestionPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(QuestionPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new QuestionPanel().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton back;
    private javax.swing.JLabel message;
    private javax.swing.JButton next;
    private javax.swing.JButton option1;
    private javax.swing.JButton option2;
    private javax.swing.JButton option3;
    private javax.swing.JButton option4;
    private javax.swing.JLabel question;
    // End of variables declaration//GEN-END:variables
}
